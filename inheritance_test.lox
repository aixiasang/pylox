// 测试继承功能

// 定义基类
class Animal {
  speak() {
    return "未知动物发出的声音";
  }
  
  eat() {
    return "动物在进食";
  }
  
  // 静态方法
  class count() {
    return "计算动物总数";
  }
}

// 定义子类
class Dog < Animal {
  speak() {
    return "汪汪!";
  }
  
  // 使用super关键字访问父类方法
  eatAndSpeak() {
    return super.eat() + " 然后 " + this.speak();
  }
  
  // 重写父类方法
  eat() {
    return "狗在吃骨头";
  }
}

// 测试不使用super的情况
class Cat < Animal {
  speak() {
    return "喵喵!";
  }
  
  // 没有重写eat方法，应该继承父类的方法
}

// 不继承任何类
class Fish {
  speak() {
    return "咕噜咕噜";
  }
}

// 测试
var animal = Animal();
var dog = Dog();
var cat = Cat();
var fish = Fish();

// 测试静态方法
print Animal.count();

// 测试基类方法
print "Animal speak: " + animal.speak();
print "Animal eat: " + animal.eat();

// 测试继承的方法
print "Dog speak: " + dog.speak();
print "Dog eat: " + dog.eat();
print "Dog eatAndSpeak: " + dog.eatAndSpeak();

// 测试未重写的继承方法
print "Cat speak: " + cat.speak();
print "Cat eat: " + cat.eat();

// 测试非继承类
print "Fish speak: " + fish.speak();

// 测试错误处理 - 注释掉以避免程序终止
// print fish.eat();  // 应该报错，Fish没有eat方法
// print fish.super.speak();  // 应该报错，Fish没有超类